
	메모리 할당 준비물
		1. 메모리 크기 [ 자료형 / 타입  / 클래스 등]
			int double 등
			String , Scanner 등
		2. 메모리 이름 [ 메모리이름 = 주소값(16진수) ] 

		3. 데이터 

	변수[ 스택영역 ] 
		1. 기본자룧료형 : int double	스택에 값 저장 
			
		2. 참조타입형 : 클래스 / 배열 	힙에 값 저장하고 힙의 주소값을 변수[스택]에 저장한다.

		== 값 비교    	3 == 3 [o]		주소1 == 주소2 [ x ] 
				값 중복이 가능하지만	주소는 중복 이 불가능하다.
		equlas 객체 비교 			주소안에있는데이터1.equlas( 주소2안에있는데이터 ) 
		[ 해당 주소 안에 있는 데이터 비교 ]


* 클래스 ( 설계도 ) : 메모리 할당전 --------------new----------> 객체 : 메모리 할당
	멤버 : 1.필드 2.생성자 3.메소드

	1. 필드 ( 데이터 저장공간 )
		1. 변수 2. 배열 3. 객체  4. 인터페이스 
	2. 생성자 ( 객체의 생성시 초기값 )
		* 생성자명은 클래스과 동일해야 한다. 
		* new 사용시 객체 필드에 값 대입 
		1. 매개변수가 없는 생성자 [ 빈생성자 ]
		2. 모든 매개변수를 받는 생성자 [ 풒풀생성자 ]
		3. ~ 그외 본인 선택 생성 
	3. 메소드 ( 미리 구성된 코드집합 )
		1. 준비물
			1. 반환타입[ 결과 ]	: 메소드를 호출했던곳으로 반환[돌려주는] 하는 데이터 
			2. 메소드이름	
			3. 매개변수[ 인수 ]	: 메소드 호출시에 메소드 안으로 들어오는 데이터   
	클래스명.멤버 [x]
	클래스명.static멤버(필드/메소드) [o]
	객체명.멤버 [ o ]

----------------------------------------------------------------------------------------------------------------------
	
	비회원게시판 [ 클래스 , DB , MVC 디자인 패턴 ]

		1. 메모리 
			1.게시물번호 	정수		중복x
			2.제목 		문자열[ ~100글자]	중복o
			3.내용 		문자열[ ~500글자]	중복o
			4.작성자 		문자열[ ~10글자 ]	중복o
			5.비밀번호 		문자열[ ~4글자 ]	중복o
			6.조회수  		정수 		중복o
		2. 기능( 메소드 ) 
			1. 게시물 등록
				제목 , 내용 , 작성자 , 비밀번호 받아야지
				인수 : 제목 , 내용. 작성자 , 비밀번호 
				반환 : 등록 , 실패
 
			2. 모든 게시물 조회
				모든 게시물의 순서대로 제목 , 내용 , 작성자 , 비밀번호 출력해야지 	
				인수 : x
				반환 : 모든 게시물의 리스트/배열 

			3. 개별 게시물
				보고 싶은 게시물 선택 !!
					선택??? : 중복이 없는 값 [ 게시물번호  ]
				1. 게시물번호 입력받는다 .
				2. 입력받은 게시물번호의 해당 게시물 모든 정보 출력한다.  

				인수 : 게시물번호 
				반환 : 해당 게시물의 정보 

			4. 수정 기능 
				1. 비밀번호 입력받는다 .
				2. 현재 보고 있는 게시물번호와 비밀번호와 동일하면 수정페이지 이동 
				3. 수정내용 입력받아 수정처리 한다. 

				인수 : 게시물번호 , 비밀번호 , 수정할 내용들 
				반환 : 성공 , 실패 

			5. 삭제 기능 
				1. 비밀번호 입력받는다 .
				2. 현재 보고 있는 게시물번호와 비밀번호와 동일하면 

				인수 : 게시물번호 , 비밀번호
				반환 : 성공 , 실패 

	Model		DAO 클래스 									Control									View	
	게시물 클래스	1. 등록처리									1. 등록처리	<--------Model[DTO]---->	1. 등록화면
				2. 모든게시물처리	<-------DTO[] 배열/리스트 ---->	2. 모든게시물처리 <-------DTO[]---->			2. 모든게시물 출력화면		
				2. 개별게시물처리	<---------Model[DTO]------>	3. 개별게시물처리 							3. 개별게시물 출력화면 
				4. 수정처리									4. 수정처리								4. 수정페이지 출력화면
				5. 삭제처리 									5. 삭제처리 								5. 삭제페이지 출력화면



	데이터베이스[DB]
  

	1.  DB 설계 
			1.게시물번호 	정수		중복x    식별키 , 자동번호 
			2.제목 		문자열[ ~100글자]	중복o
			3.내용 		문자열[ ~500글자]	중복o
			4.작성자 		문자열[ ~10글자 ]	중복o
			5.비밀번호 		문자열[ ~4글자 ]	중복o
			6.조회수  		정수 		중복o


	create table 테이블명( 필드명1 타입 속성 , 필드명2 타입 속성 , 필드명3 타입 속성 );

	create table board(
    		b_no int primary key auto_increment , 
		b_title varchar(100)  ,		
    		b_content varchar(500 ) ,	 
    		b_writer varchar(10) , 		
   		b_password varchar(4) , 	 
    		b_view int 					
	);


	2. 클래스 설계 
		
		1. BoardDao	: 데이터베이스와 접근 객체
			1. DB 접속코드 
			2. 메소드 
				1. regist( )
					인수 :  BoardDto
					반환 :  boolean 
				2. getBoardlist ( )
					인수 : x 
					반환 : BoardDto[]		: dto 여러개이니까 배열/리스트 
				3. getBoard( )
					인수 : int b_no 
					반환 :  BoardDto
				4. update( )
					인수 : int b_no , int b_password , String b_title, String b_content 
					반환 : boolean
				5. delete ( )
					인수 : int b_no , int b_password
					반환 : boolean 

		2. BoardDto	:  이동객체 [ db의 필드명과 동일하게 작성 ]
			1. 필드
				int b_no;
				String b_title;
				String b_content;
				String b_writer ;
				String b_password;
				int b_view;
				
			2. 생성자
				1. 빈생성자  2.풀생성자 
			3. 메소드 	
		
		3. BoardControl	: 로직처리 클래스 


		4. BoardPage	: 화면 출력 클래스 		



















